// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.bumble.dev/shcherbanich/user-votes-storage/config"
	"github.bumble.dev/shcherbanich/user-votes-storage/internal/app"
	"github.bumble.dev/shcherbanich/user-votes-storage/internal/app/api"
	"github.bumble.dev/shcherbanich/user-votes-storage/internal/context/voting/application"
	"github.bumble.dev/shcherbanich/user-votes-storage/internal/context/voting/application/messaging/handler"
	"github.bumble.dev/shcherbanich/user-votes-storage/internal/context/voting/application/operation"
	repository2 "github.bumble.dev/shcherbanich/user-votes-storage/internal/context/voting/domain/counter/repository"
	"github.bumble.dev/shcherbanich/user-votes-storage/internal/context/voting/domain/romance/repository"
	"github.bumble.dev/shcherbanich/user-votes-storage/internal/context/voting/infrastructure/persistence"
	"github.bumble.dev/shcherbanich/user-votes-storage/internal/context/voting/interface/api/rest/v1"
	"github.bumble.dev/shcherbanich/user-votes-storage/internal/shared/platform"
	"github.bumble.dev/shcherbanich/user-votes-storage/internal/shared/platform/amazon_sns"
	"github.bumble.dev/shcherbanich/user-votes-storage/internal/shared/platform/dynamodb"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeApiWebServer(config2 config.Config) (*app.ApiWebServer, error) {
	logger := platform.NewLogger(config2)
	client := dynamodb.NewDynamoDbClient(config2, logger)
	romancesRepository := persistence.NewRomancesRepository(client, config2, logger)
	countersRepository := persistence.NewCountersRepository(client, config2, logger)
	addUserVoteOperation := operation.NewAddUserVoteOperation(romancesRepository, countersRepository, logger)
	getUserVoteOperation := operation.NewGetUserVoteOperation(romancesRepository)
	deleteUserVoteOperation := operation.NewDeleteUserVoteOperation(romancesRepository, countersRepository, logger)
	changeUserVoteOperation := operation.NewChangeUserVoteOperation(romancesRepository, countersRepository, logger)
	getRomanceOperation := operation.NewGetRomanceOperation(romancesRepository)
	deleteRomanceOperation := operation.NewDeleteRomanceOperation(romancesRepository)
	snsPublisher := amazon_sns.NewSnsPublisher(config2, logger)
	deleteRomancesOperation := operation.NewDeleteRomancesOperation(snsPublisher, logger)
	getLifetimeCountersOperation := operation.NewGetLifetimeCountersOperation(countersRepository)
	getHourlyCountersOperation := operation.NewGetHourlyCountersOperation(countersRepository)
	votingService := application.NewVotingService(addUserVoteOperation, getUserVoteOperation, deleteUserVoteOperation, changeUserVoteOperation, getRomanceOperation, deleteRomanceOperation, deleteRomancesOperation, getLifetimeCountersOperation, getHourlyCountersOperation)
	votesStorageRoutsRegister := v1.NewVotesStorageRoutsRegister(votingService)
	handlerFactory := api.NewHandlerFactory(votesStorageRoutsRegister)
	apiWebServer := app.NewApiWebServer(handlerFactory, config2, logger)
	return apiWebServer, nil
}

func InitializeMessageProcessor(config2 config.Config) (*app.MessageProcessor, error) {
	logger := platform.NewLogger(config2)
	snsSubscriber := amazon_sns.NewSnsSubscriber(config2, logger)
	deleteRomancesHandler := handler.NewDeleteDeleteRomancesHandler(logger)
	messageProcessor := app.NewMessageProcessor(snsSubscriber, deleteRomancesHandler, logger)
	return messageProcessor, nil
}

// wire.go:

var PlatformSet = wire.NewSet(platform.NewLogger)

var ReposSet = wire.NewSet(dynamodb.NewDynamoDbClient, persistence.NewRomancesRepository, persistence.NewCountersRepository, wire.Bind(new(repository.RomancesRepository), new(*persistence.RomancesRepository)), wire.Bind(new(repository2.CountersRepository), new(*persistence.CountersRepository)))
