// Code generated by MockGen. DO NOT EDIT.
// Source: github.bumble.dev/shcherbanich/user-votes-storage/internal/context/voting/domain/counter/repository (interfaces: CountersRepository)
//
// Generated by this command:
//
//	mockgen -destination=../../../../../testlib/mocks/counters_repository_mock.go -package=mocks github.bumble.dev/shcherbanich/user-votes-storage/internal/context/voting/domain/counter/repository CountersRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.bumble.dev/shcherbanich/user-votes-storage/internal/context/voting/domain/counter/entity"
	valueobject "github.bumble.dev/shcherbanich/user-votes-storage/internal/context/voting/domain/counter/valueobject"
	valueobject0 "github.bumble.dev/shcherbanich/user-votes-storage/internal/context/voting/domain/sharedkernel/valueobject"
	gomock "go.uber.org/mock/gomock"
)

// MockCountersRepository is a mock of CountersRepository interface.
type MockCountersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCountersRepositoryMockRecorder
	isgomock struct{}
}

// MockCountersRepositoryMockRecorder is the mock recorder for MockCountersRepository.
type MockCountersRepositoryMockRecorder struct {
	mock *MockCountersRepository
}

// NewMockCountersRepository creates a new mock instance.
func NewMockCountersRepository(ctrl *gomock.Controller) *MockCountersRepository {
	mock := &MockCountersRepository{ctrl: ctrl}
	mock.recorder = &MockCountersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCountersRepository) EXPECT() *MockCountersRepositoryMockRecorder {
	return m.recorder
}

// GetHourlyCounters mocks base method.
func (m *MockCountersRepository) GetHourlyCounters(ctx context.Context, activeUserKey valueobject0.ActiveUserKey, hoursOffsetGroups valueobject.HoursOffsetGroups) (map[uint8]*entity.CountersGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHourlyCounters", ctx, activeUserKey, hoursOffsetGroups)
	ret0, _ := ret[0].(map[uint8]*entity.CountersGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHourlyCounters indicates an expected call of GetHourlyCounters.
func (mr *MockCountersRepositoryMockRecorder) GetHourlyCounters(ctx, activeUserKey, hoursOffsetGroups any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHourlyCounters", reflect.TypeOf((*MockCountersRepository)(nil).GetHourlyCounters), ctx, activeUserKey, hoursOffsetGroups)
}

// GetLifetimeCounter mocks base method.
func (m *MockCountersRepository) GetLifetimeCounter(ctx context.Context, activeUserKey valueobject0.ActiveUserKey) (entity.CountersGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLifetimeCounter", ctx, activeUserKey)
	ret0, _ := ret[0].(entity.CountersGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLifetimeCounter indicates an expected call of GetLifetimeCounter.
func (mr *MockCountersRepositoryMockRecorder) GetLifetimeCounter(ctx, activeUserKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLifetimeCounter", reflect.TypeOf((*MockCountersRepository)(nil).GetLifetimeCounter), ctx, activeUserKey)
}

// IncrNoCounters mocks base method.
func (m *MockCountersRepository) IncrNoCounters(ctx context.Context, voteId valueobject0.VoteId, counterGroup valueobject.CounterUpdateGroup) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrNoCounters", ctx, voteId, counterGroup)
}

// IncrNoCounters indicates an expected call of IncrNoCounters.
func (mr *MockCountersRepositoryMockRecorder) IncrNoCounters(ctx, voteId, counterGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrNoCounters", reflect.TypeOf((*MockCountersRepository)(nil).IncrNoCounters), ctx, voteId, counterGroup)
}

// IncrYesCounters mocks base method.
func (m *MockCountersRepository) IncrYesCounters(ctx context.Context, voteId valueobject0.VoteId, counterGroup valueobject.CounterUpdateGroup) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrYesCounters", ctx, voteId, counterGroup)
}

// IncrYesCounters indicates an expected call of IncrYesCounters.
func (mr *MockCountersRepositoryMockRecorder) IncrYesCounters(ctx, voteId, counterGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrYesCounters", reflect.TypeOf((*MockCountersRepository)(nil).IncrYesCounters), ctx, voteId, counterGroup)
}
