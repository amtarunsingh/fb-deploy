// Code generated by MockGen. DO NOT EDIT.
// Source: github.bumble.dev/shcherbanich/user-votes-storage/internal/context/voting/domain/romance/repository (interfaces: RomancesRepository)
//
// Generated by this command:
//
//	mockgen -destination=../../../../../testlib/mocks/romances_repository_mock.go -package=mocks github.bumble.dev/shcherbanich/user-votes-storage/internal/context/voting/domain/romance/repository RomancesRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.bumble.dev/shcherbanich/user-votes-storage/internal/context/voting/domain/romance/entity"
	valueobject "github.bumble.dev/shcherbanich/user-votes-storage/internal/context/voting/domain/romance/valueobject"
	valueobject0 "github.bumble.dev/shcherbanich/user-votes-storage/internal/context/voting/domain/sharedkernel/valueobject"
	gomock "go.uber.org/mock/gomock"
)

// MockRomancesRepository is a mock of RomancesRepository interface.
type MockRomancesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRomancesRepositoryMockRecorder
	isgomock struct{}
}

// MockRomancesRepositoryMockRecorder is the mock recorder for MockRomancesRepository.
type MockRomancesRepositoryMockRecorder struct {
	mock *MockRomancesRepository
}

// NewMockRomancesRepository creates a new mock instance.
func NewMockRomancesRepository(ctrl *gomock.Controller) *MockRomancesRepository {
	mock := &MockRomancesRepository{ctrl: ctrl}
	mock.recorder = &MockRomancesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRomancesRepository) EXPECT() *MockRomancesRepositoryMockRecorder {
	return m.recorder
}

// AddActiveUserVoteToRomance mocks base method.
func (m *MockRomancesRepository) AddActiveUserVoteToRomance(ctx context.Context, romance entity.Romance, voteType valueobject.VoteType, votedAt time.Time) (entity.Romance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddActiveUserVoteToRomance", ctx, romance, voteType, votedAt)
	ret0, _ := ret[0].(entity.Romance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddActiveUserVoteToRomance indicates an expected call of AddActiveUserVoteToRomance.
func (mr *MockRomancesRepositoryMockRecorder) AddActiveUserVoteToRomance(ctx, romance, voteType, votedAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddActiveUserVoteToRomance", reflect.TypeOf((*MockRomancesRepository)(nil).AddActiveUserVoteToRomance), ctx, romance, voteType, votedAt)
}

// ChangeActiveUserVoteTypeInRomance mocks base method.
func (m *MockRomancesRepository) ChangeActiveUserVoteTypeInRomance(ctx context.Context, romance entity.Romance, newVoteType valueobject.VoteType) (entity.Romance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeActiveUserVoteTypeInRomance", ctx, romance, newVoteType)
	ret0, _ := ret[0].(entity.Romance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeActiveUserVoteTypeInRomance indicates an expected call of ChangeActiveUserVoteTypeInRomance.
func (mr *MockRomancesRepositoryMockRecorder) ChangeActiveUserVoteTypeInRomance(ctx, romance, newVoteType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeActiveUserVoteTypeInRomance", reflect.TypeOf((*MockRomancesRepository)(nil).ChangeActiveUserVoteTypeInRomance), ctx, romance, newVoteType)
}

// DeleteActiveUserVoteFromRomance mocks base method.
func (m *MockRomancesRepository) DeleteActiveUserVoteFromRomance(ctx context.Context, romance entity.Romance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActiveUserVoteFromRomance", ctx, romance)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActiveUserVoteFromRomance indicates an expected call of DeleteActiveUserVoteFromRomance.
func (mr *MockRomancesRepositoryMockRecorder) DeleteActiveUserVoteFromRomance(ctx, romance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActiveUserVoteFromRomance", reflect.TypeOf((*MockRomancesRepository)(nil).DeleteActiveUserVoteFromRomance), ctx, romance)
}

// DeleteRomance mocks base method.
func (m *MockRomancesRepository) DeleteRomance(ctx context.Context, voteId valueobject0.VoteId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRomance", ctx, voteId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRomance indicates an expected call of DeleteRomance.
func (mr *MockRomancesRepositoryMockRecorder) DeleteRomance(ctx, voteId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRomance", reflect.TypeOf((*MockRomancesRepository)(nil).DeleteRomance), ctx, voteId)
}

// GetRomance mocks base method.
func (m *MockRomancesRepository) GetRomance(ctx context.Context, voteId valueobject0.VoteId) (entity.Romance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRomance", ctx, voteId)
	ret0, _ := ret[0].(entity.Romance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRomance indicates an expected call of GetRomance.
func (mr *MockRomancesRepositoryMockRecorder) GetRomance(ctx, voteId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRomance", reflect.TypeOf((*MockRomancesRepository)(nil).GetRomance), ctx, voteId)
}
